import React from "react";
import { useNavigate, Link } from "react-router-dom";
import { Form, Input, Button, DatePicker, Select } from "antd";
import { toast } from "react-toastify";
import {
  GoogleOutlined,
  FacebookOutlined,
  ArrowLeftOutlined,
} from "@ant-design/icons";
import api from "../../config/api";
import "./index.scss";
const { Option } = Select;

function RegisterPage() {
  const navigate = useNavigate();
  const handleRegister = async (values) => {
    console.log("Register values:", values);
    try {
     const formattedDate = values.dateOfBirth
  ? values.dateOfBirth.format("YYYY-MM-DD")
  : null;
    console.log("date object:", formattedDate);
    
      const response = await api.post(
        "Auth/register",
        {
          username: values.username,
          email: values.email,
          password: values.password,
          confirmPassword: values.confirmPassword,
          fullName: values.fullName,
          phoneNumber: values.phoneNumber,
          dateOfBirth: formattedDate,
          gender: values.gender,
          avatarUrl: values.avatarUrl,
        })

        
        console.log("Register response:", response);

      const { status, data } = response;
      if (status === 200 && data?.data) {
      toast.success("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!");
      navigate("/login");
    } else {
      // Tr∆∞·ªùng h·ª£p BE tr·∫£ v·ªÅ nh∆∞ng kh√¥ng c√≥ data h·ª£p l·ªá
      const message = data?.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i!";
      toast.error(`‚ö†Ô∏è ${message}`);
      console.error("‚ö†Ô∏è Unexpected response:", response);
    }
  } catch (error) {
    console.error("‚ùå Register error:", error);

    // üëâ X·ª≠ l√Ω l·ªói c·ª• th·ªÉ t·ª´ BE
    if (error.response) {
      const { status, data } = error.response;

      console.log("üî¥ Error response:", error.response);

      // ‚ö†Ô∏è 409 - Tr√πng username ho·∫∑c email
      if (status === 409) {
        const msg = data?.message || "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i!";
        toast.error(`‚ö†Ô∏è ${msg}`);
      }
      // ‚ö†Ô∏è 400 - D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
      else if (status === 400) {
        const msg = data?.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!";
        toast.error(`‚ö†Ô∏è ${msg}`);
      }
      // ‚ö†Ô∏è 500 - L·ªói server
      else if (status >= 500) {
        toast.error("üö® L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau!");
      }
      // ‚ö†Ô∏è Tr∆∞·ªùng h·ª£p kh√°c
      else {
        const msg = data?.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i!";
        toast.error(`‚ö†Ô∏è ${msg}`);
      }
    } else if (error.request) {
      // ‚ö†Ô∏è Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server
      console.error("üïì No response received:", error.request);
      toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra m·∫°ng!");
    } else {
      // ‚ö†Ô∏è L·ªói kh√°c (v√≠ d·ª• bug JS)
      toast.error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}`);
    }
  }
};

  return (
    <div className="register">
      <div className="back-button" onClick={() => navigate("/")}>
        <ArrowLeftOutlined style={{ fontSize: "28px", color: "#fff" }} />
      </div>

      <div className="register-title-wrapper">
        <h2 className="register-title">CONQUER INTERVIEW</h2>
      </div>

      <div className="register-page">
        <div className="register-page__content">
          <Form onFinish={handleRegister} className="form" layout="vertical">
            <Form.Item
              label="T√™n ƒëƒÉng nh·∫≠p"
              name="username"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!" },
              ]}
            >
              <Input placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" />
            </Form.Item>

            <Form.Item
              label="Email"
              name="email"
              rules={[
                {
                  required: true,
                  type: "email",
                  message: "Vui l√≤ng nh·∫≠p email h·ª£p l·ªá!",
                },
              ]}
            >
              <Input placeholder="Nh·∫≠p email" />
            </Form.Item>

            <Form.Item
              label="M·∫≠t kh·∫©u"
              name="password"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" }]}
            >
              <Input type="password" placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
            </Form.Item>

            <Form.Item
              label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
              name="confirmPassword"
              dependencies={["password"]}
              rules={[
                { required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!" },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || getFieldValue("password") === value) {
                      return Promise.resolve();
                    }
                    return Promise.reject("M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
                  },
                }),
              ]}
            >
              <Input type="password" placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u" />
            </Form.Item>

            <Form.Item
              label="H·ªç v√† t√™n"
              name="fullName"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n!" }]}
            >
              <Input placeholder="Nh·∫≠p h·ªç v√† t√™n" />
            </Form.Item>

            <Form.Item
              label="S·ªë ƒëi·ªán tho·∫°i"
              name="phoneNumber"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" },
              ]}
            >
              <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
            </Form.Item>

            <Form.Item
              label="Ng√†y sinh"
              name="dateOfBirth"
              rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ng√†y sinh!" }]}
            >
              <DatePicker format="YYYY-MM-DD" style={{ width: "100%" }} />
            </Form.Item>

            <Form.Item
              label="Gi·ªõi t√≠nh"
              name="gender"
              rules={[{ required: true, message: "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh!" }]}
            >
              <Select placeholder="Ch·ªçn gi·ªõi t√≠nh">
                <Option value="male">Nam</Option>
                <Option value="female">N·ªØ</Option>
                <Option value="other">Kh√°c</Option>
              </Select>
            </Form.Item>

            <Form.Item label="·∫¢nh ƒë·∫°i di·ªán (URL)" name="avatarUrl">
              <Input placeholder="Nh·∫≠p link ·∫£nh ƒë·∫°i di·ªán" />
            </Form.Item>

            <div className="buttons">
              <Button type="primary" htmlType="submit" className="register-btn">
                ƒêƒÉng k√Ω
              </Button>
              <Button type="default" className="login-btn">
                <Link to="/login">ƒêƒÉng nh·∫≠p</Link>
              </Button>
            </div>
          </Form>

          {/* Social Login */}
          <div className="social-login">
            <GoogleOutlined
              style={{ fontSize: "24px", marginRight: "12px", color: "red" }}
            />
            <FacebookOutlined style={{ fontSize: "24px", color: "#1877F2" }} />
          </div>
        </div>
      </div>
    </div>
  );
}

export default RegisterPage;
